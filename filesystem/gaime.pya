# a basic PyOS app

import json
import os
import opensimplex

# Constants
MAP_WIDTH = 1000
MAP_HEIGHT = 100
TILE_SIZE = 16  # Increased from 10
PLAYER_SIZE = 12  # Smaller than tile size for better collision
PLAYER_COLOR = (0, 255, 0)
GRAVITY = 400.0  # Pixels per second squared
THRUST = 600.0  # Upward acceleration
MOVE_SPEED = 200.0  # Horizontal movement speed
FRICTION = 800.0  # Friction deceleration rate
ZOOM = 2.0  # Camera zoom factor (2x zoom)
player_pos = [50.0 * TILE_SIZE, 29.0 * TILE_SIZE]  # Pixel-based position
player_vel = [0.0, 0.0]  # Velocity vector
camera_pos = [0.0, 0.0]
money = 0

# Tile types
TILE_AIR = 0
# Ore tile types (add at the top near your other TILE_ constants)
TILE_COAL = 5
TILE_IRON = 6
TILE_COPPER = 7
TILE_GOLD = 8
TILE_DIAMOND = 9
TILE_EMERALD = 10
TILE_DIRT = 1
TILE_CAVE = 2  # Cave air from dirt mining
TILE_STONE = 3  # New stone tile type
TILE_CAVE2 = 4  # Cave air from stone mining
TILE_GRASS = 11

# UPDATE: add spacing to make it easier to read
solid = [       TILE_DIRT, TILE_STONE, TILE_COAL,  TILE_IRON,  TILE_COPPER, TILE_GOLD,  TILE_DIAMOND, TILE_EMERALD, TILE_GRASS ] # Make sure not to put TILE_AIR or TILE_CAVE here
minable = [     TILE_DIRT, TILE_STONE, TILE_COAL,  TILE_IRON,  TILE_COPPER, TILE_GOLD,  TILE_DIAMOND, TILE_EMERALD, TILE_GRASS ] # Tiles that can be mined
minedto = [     TILE_CAVE, TILE_CAVE2, TILE_CAVE2, TILE_CAVE2, TILE_CAVE2,  TILE_CAVE2, TILE_CAVE2,   TILE_CAVE2,   TILE_CAVE  ] # Tiles that are left after mining
price = [       0,         0,          1,          3,          3,           5,          10,          20,            -1         ] # What do the tiles sell for? (ignore grass, you cant get that in your inventory anyway)
mining_times = [0.5,       1,          1.5,        2,          2,           1.5,        8,            3,            0.5        ] # How long does it take to mine* the tile? (in seconds) *technically, its how long the animation plays for
colors = {
    TILE_DIRT: (139, 69, 19),  # Brown
    TILE_STONE: (128, 128, 128),  # Gray
    TILE_CAVE: (40, 20, 5),  # Dark cave color
    TILE_CAVE2: (30, 30, 35),  # Lighter cave color
    TILE_AIR: (171, 205, 239),  # Light blue for air
    TILE_GRASS: (0, 255, 0),  # Green for grass
    TILE_COAL: (0, 0, 0),  # Black for coal
    TILE_IRON: (200, 200, 200),  # Light gray for iron
    TILE_COPPER: (255, 165, 0),  # Orange for copper
    TILE_GOLD: (255, 215, 0),   # Gold color
    TILE_DIAMOND: (0, 255, 255),   # Cyan for diamond
    TILE_EMERALD: (0, 255, 30)   # Bright green for emerald
}
outline_colors = {
    TILE_DIRT: (80, 40, 11),  # Darker brown for dirt outline
    TILE_STONE: (90, 90, 90),  # Darker gray for stone outline
    TILE_CAVE: -1, # No outline for cave
    TILE_CAVE2: -1, # No outline for cave2
    TILE_AIR: -1, # No outline for air
    TILE_GRASS: (0, 200, 0),  # Darker green for grass outline
    TILE_COAL: (50, 50, 50),  # Darker gray for coal outline
    TILE_IRON: (150, 150, 150),  # Darker gray for iron outline
    TILE_COPPER: (200, 100, 0),   # Brown for copper outline
    TILE_GOLD: (200, 150, 0),   # Brown for gold outline
    TILE_DIAMOND: (0, 200, 200),   # Darker cyan for diamond outline
    TILE_EMERALD: (0, 200, 20)   # Darker green for emerald outline
}

PLAYER_COLOR = (0, 255, 0)
wall_contact_timer = 0  # Timer for wall contact
last_wall_direction = None  # Track which wall we're touching



# Mining settings
INVENTORY_CAPACITY = 10
INVENTORY_EMPTYING_TICK = 3  # Every 3 frames clear 1 dirt when in air
inventory = []
clear_ticker = 0

# Data persistence
SAVE_PATH = os.path.join("filesystem", "gaime_save.json")

# Global map data (static map for simplicity)
map_data = None

# Mining animation data
class MiningTarget:
    def __init__(self, x, y, player_target_x, player_target_y, direction):
        self.x = x
        self.y = y
        self.progress = 0.0  # 0.0 to 1.0
        # Start from the center of current tile
        current_tile_x = int(player_pos[0] // TILE_SIZE)
        current_tile_y = int(player_pos[1] // TILE_SIZE)
        self.player_start_x = (current_tile_x * TILE_SIZE) + (TILE_SIZE - PLAYER_SIZE) / 2
        self.player_start_y = (current_tile_y * TILE_SIZE) + (TILE_SIZE - PLAYER_SIZE) / 2
        self.player_target_x = player_target_x
        self.player_target_y = player_target_y
        self.direction = direction  # Store mining direction with target
        
mining_targets = {}  # (x,y) -> MiningTarget
MINE_SPEED = 1.0  # Time in seconds to mine a block

def load_game_data():
    global inventory, map_data
    try:
        if os.path.exists(SAVE_PATH):
            with open(SAVE_PATH, 'r') as f:
                data = json.load(f)
                inventory = data.get('inventory', [])
                # Load world state if it exists
                if 'world' in data:
                    for y in range(MAP_HEIGHT):
                        for x in range(MAP_WIDTH):
                            map_data[x][y] = data['world'][y][x]
                # Money
                money = data.get('money', 0)
    except Exception as e:
        print(f"Error loading game data: {e}")
        # Initialize new world if load fails
        map_data = [[TILE_AIR if y < 30 else TILE_DIRT for y in range(MAP_HEIGHT)] for x in range(MAP_WIDTH)]

def save_game_data():
    try:
        # Convert world data to 2D list for JSON serialization
        world_data = [[map_data[x][y] for x in range(MAP_WIDTH)] for y in range(MAP_HEIGHT)]
        save_data = {
            'inventory': inventory,
            'world': world_data,
            'money': money,
            'version': 2
        }
        # Use the PyOS filesystem API to create the file
        api.filesystem.create_file("gaime_save.json", json.dumps(save_data), "json")
    except Exception as e:
        print(f"Error saving game data: {e}")

def generate_ore_cloud(tile_type, cloud, count):
    for _ in range(count):
        attempts = 0
        while attempts < 20:
            x = random.randint(2, MAP_WIDTH - len(cloud) - 2)
            y = random.randint(32, MAP_HEIGHT - len(cloud) - 2)
            if map_data[x][y] == TILE_STONE:
                # Good spot
                for dx in range(len(cloud)):
                    for dy in range(len(cloud[0])):
                        if map_data[x+dx][y+dy] == TILE_STONE:
                            chance = cloud[dx][dy]
                            if random.random() < chance:
                                map_data[x+dx][y+dy] = tile_type
                break
            else:
                attempts += 1
        # After 20 fails, just skip to next cloud without placing

def init(rect):
    global player_pos, camera_pos, player_vel, wall_contact_timer, last_wall_direction, map_data
    player_pos = [50.0 * TILE_SIZE, 29.0 * TILE_SIZE]
    player_vel = [0.0, 0.0]
    camera_pos = [player_pos[0] - rect.width//2, player_pos[1] - rect.height//2]
    wall_contact_timer = 0
    last_wall_direction = None

    if map_data is None:
        map_data = [[TILE_AIR for _ in range(MAP_HEIGHT)] for _ in range(MAP_WIDTH)]

        # Generate terrain - dirt above stone
        for x in range(MAP_WIDTH):
            perlinnoise = int(opensimplex.noise2(x / 10.0, 0) * 5)
            for y in range(MAP_HEIGHT):
                if y > 30 + perlinnoise:
                    if y > 31 + random.randint(1, 3) + perlinnoise:
                        map_data[x][y] = TILE_STONE
                    else:
                        map_data[x][y] = TILE_DIRT
                    # grass
                    if y == 31 + perlinnoise:
                        map_data[x][y] = TILE_GRASS

        # Ore clouds
        big_cloud = [
            [0, 0.2, 0.5, 0.2, 0],
            [0.2, 0.5, 1.0, 0.5, 0.2],
            [0.5, 1.0, 1.0, 1.0, 0.5],
            [0.2, 0.5, 1.0, 0.5, 0.2],
            [0, 0.2, 0.5, 0.2, 0]
        ]
        small_cloud = [
            [0.2, 0.5, 0.2],
            [0.5, 1.0, 0.5],
            [0.2, 0.5, 0.2]
        ]

        # Coal
        generate_ore_cloud(TILE_COAL, big_cloud, 50)
        generate_ore_cloud(TILE_COAL, small_cloud, 100)

        # Iron
        generate_ore_cloud(TILE_IRON, big_cloud, 30)
        generate_ore_cloud(TILE_IRON, small_cloud, 80)

        # Copper
        generate_ore_cloud(TILE_COPPER, big_cloud, 30)
        generate_ore_cloud(TILE_COPPER, small_cloud, 50)

        # Gold
        generate_ore_cloud(TILE_GOLD, big_cloud, 10)
        generate_ore_cloud(TILE_GOLD, small_cloud, 40)

        # Diamond
        generate_ore_cloud(TILE_DIAMOND, big_cloud, 10)
        generate_ore_cloud(TILE_DIAMOND, small_cloud, 20)

        # Emerald
        generate_ore_cloud(TILE_EMERALD, small_cloud, 50)

    load_game_data()

def check_collision(x, y, w, h):
    # Convert pixel coordinates to tile coordinates
    tile_x1 = int(x // TILE_SIZE)
    tile_x2 = int((x + w - 1) // TILE_SIZE)
    tile_y1 = int(y // TILE_SIZE)
    tile_y2 = int((y + h - 1) // TILE_SIZE)
    
    for tx in range(tile_x1, tile_x2 + 1):
        for ty in range(tile_y1, tile_y2 + 1):
            if 0 <= tx < MAP_WIDTH and 0 <= ty < MAP_HEIGHT:
                tile_type = map_data[tx][ty]
                if tile_type in solid:
                    return True
    return False

def try_mine_tile(x, y):
    global mining_targets, inventory
    key = (x, y)
    #if inventory >= INVENTORY_CAPACITY:
    if len(inventory) >= INVENTORY_CAPACITY:
        return False
    if 0 <= x < MAP_WIDTH and 0 <= y < MAP_HEIGHT:
        tile_type = map_data[x][y]
        if tile_type in minable and not key in mining_targets:
            # Snap player to grid first
            start_x = (player_pos[0] // TILE_SIZE) * TILE_SIZE + TILE_SIZE/2 - PLAYER_SIZE/2
            start_y = (player_pos[1] // TILE_SIZE) * TILE_SIZE + TILE_SIZE/2 - PLAYER_SIZE/2
            
            # Calculate target position (center of target tile)
            if last_wall_direction == 'left':
                target_x = (x * TILE_SIZE) + TILE_SIZE/2 - PLAYER_SIZE/2
                target_y = start_y
            elif last_wall_direction == 'right':
                target_x = (x * TILE_SIZE) + TILE_SIZE/2 - PLAYER_SIZE/2
                target_y = start_y
            elif last_wall_direction == 'down':
                target_x = start_x
                target_y = (y * TILE_SIZE) + TILE_SIZE/2 - PLAYER_SIZE/2
            
            mining_targets[key] = MiningTarget(x, y, target_x, target_y, last_wall_direction)
            mining_targets[key].mine_time = mining_times[minable.index(tile_type)]  # Set mine time based on tile type
            # Instantly snap to grid
            player_pos[0] = start_x
            player_pos[1] = start_y
            return True
    return False

def update_mining(delta_time):
    global mining_targets, map_data, player_pos, player_vel, inventory
    completed = []
    
    for key, target in mining_targets.items():
        mine_time = target.mine_time
        target.progress += delta_time / mine_time
        
        # Lerp player position
        lerp_factor = min(1.0, target.progress * 1)
        player_pos[0] = target.player_start_x + (target.player_target_x - target.player_start_x) * lerp_factor
        player_pos[1] = target.player_start_y + (target.player_target_y - target.player_start_y) * lerp_factor
        
        # Reset velocity while mining
        player_vel[0] = 0
        player_vel[1] = 0
        
        if target.progress >= 1.0:
            tile_type = map_data[target.x][target.y]
            map_data[target.x][target.y] = minedto[minable.index(tile_type)]
            completed.append((tile_type, key))
    
    for (i, key) in completed:
        #inventory += 1  # Add dirt when mining completes # V1
        # V2:
        #type_of_mining = map_data[key[0]][key[1]] # BAD: map data already changed. wen eed to store the original tile type in the mining task
        # assume its already there
        type_of_mining = i
        if type_of_mining == TILE_GRASS:
            # edge case: grass dies
            type_of_mining = TILE_DIRT
        inventory.append(type_of_mining)
        del mining_targets[key]

def update_inventory_emptying():
    global inventory, clear_ticker, money
    # Check if player is in air
    player_tile_y = int(player_pos[1] // TILE_SIZE)
    if player_tile_y < 30:  # Above ground level
        clear_ticker += 1
        if clear_ticker >= INVENTORY_EMPTYING_TICK:
            """if inventory > 0:
                inventory -= 1"""
            if inventory:
                # Award player coins
                value = price[minable.index(inventory[-1])]
                money += value
                # Remove the last item from the inventory
                inventory.pop()
            clear_ticker = 0
    else:
        clear_ticker = 0

def draw_inventory(offscreen_surface):
    BAR_HEIGHT = 20
    BAR_WIDTH = 100
    BAR_MARGIN = 10
    
    # Draw background
    pygame.draw.rect(offscreen_surface, (50, 50, 50),
                    pygame.Rect(BAR_MARGIN, BAR_MARGIN, BAR_WIDTH, BAR_HEIGHT))
    
    # Draw fill
    """fill_width = int((inventory / INVENTORY_CAPACITY) * BAR_WIDTH)
    if fill_width > 0:
        pygame.draw.rect(offscreen_surface, (139, 69, 19),
                        pygame.Rect(BAR_MARGIN, BAR_MARGIN, fill_width, BAR_HEIGHT))"""
    # Draw border
    pygame.draw.rect(offscreen_surface, (80, 80, 80),
                    pygame.Rect(BAR_MARGIN-2, BAR_MARGIN-2, BAR_WIDTH+2, BAR_HEIGHT+4), 2)
    # NEW: resources are overworld colors and have 1px gaps inbetween
    draw_x = BAR_MARGIN 
    for pos, thing in enumerate(inventory):
        resource_color = colors[thing]
        # draw a bar of length BAR_WIDTH / INVENTORY_CAPACITY - 2
        pygame.draw.rect(offscreen_surface, resource_color,
                        pygame.Rect(draw_x, BAR_MARGIN, BAR_WIDTH / INVENTORY_CAPACITY - 2, BAR_HEIGHT))
        draw_x += BAR_WIDTH / INVENTORY_CAPACITY # Advance to next bar

    
    
    # Draw text. repusposed for coins
    font = pygame.font.Font(None, 25)
    text_fg = font.render(f"Coins: {money}", True, (255, 255, 0))
    text_bg = font.render(f"Coins: {money}", True, (0, 0, 0))
    # blit in a octagonal thingy:
    # bg bg bg
    # bg fg bg
    # bg bg bg
    # fg last
    # to get a nice outline
    # 1. top row
    O = 30
    offscreen_surface.blit(text_bg, (BAR_MARGIN - 1, O + BAR_MARGIN - 1))   
    offscreen_surface.blit(text_bg, (BAR_MARGIN, O + BAR_MARGIN - 1))
    offscreen_surface.blit(text_bg, (BAR_MARGIN + 1, O + BAR_MARGIN - 1))
    # 2. middle row
    offscreen_surface.blit(text_bg, (BAR_MARGIN - 1, O + BAR_MARGIN))
    offscreen_surface.blit(text_bg, (BAR_MARGIN + 1, O + BAR_MARGIN))
    # 3. bottom row
    offscreen_surface.blit(text_bg, (BAR_MARGIN - 1, O + BAR_MARGIN + 1))
    offscreen_surface.blit(text_bg, (BAR_MARGIN, O + BAR_MARGIN + 1))
    offscreen_surface.blit(text_bg, (BAR_MARGIN + 1, O + BAR_MARGIN + 1))
    # 4. center
    offscreen_surface.blit(text_fg, (BAR_MARGIN, O + BAR_MARGIN))


def draw_grid(offscreen_surface):
    view_x = max(0, int(camera_pos[0] // TILE_SIZE))
    view_y = max(0, int(camera_pos[1] // TILE_SIZE))
    view_width = min(offscreen_surface.get_width() // TILE_SIZE + 2, MAP_WIDTH - view_x)
    view_height = min(offscreen_surface.get_height() // TILE_SIZE + 2, MAP_HEIGHT - view_y)
    
    # First pass: Draw base tiles
    for x in range(view_x, min(view_x + view_width, MAP_WIDTH)):
        for y in range(view_y, min(view_y + view_height, MAP_HEIGHT)):
            if 0 <= x < MAP_WIDTH and 0 <= y < MAP_HEIGHT:
                screen_x = int(x * TILE_SIZE - camera_pos[0])
                screen_y = int(y * TILE_SIZE - camera_pos[1])
                
                tile_type = map_data[x][y]
                tile_color = colors[tile_type]
                outline_color = outline_colors[tile_type]
                pygame.draw.rect(offscreen_surface, tile_color,
                                pygame.Rect(screen_x, screen_y, TILE_SIZE, TILE_SIZE))
                if not outline_color == -1:
                    pygame.draw.rect(offscreen_surface, outline_color,
                                    pygame.Rect(screen_x, screen_y, TILE_SIZE, TILE_SIZE), 1)    
    # Second pass: Draw mining overlays
    for key, target in mining_targets.items():
        x, y = key
        if view_x <= x < view_x + view_width and view_y <= y < view_y + view_height:
            screen_x = int(x * TILE_SIZE - camera_pos[0])
            screen_y = int(y * TILE_SIZE - camera_pos[1])
            
            size = int(TILE_SIZE * target.progress)
            if size > 0:
                # Get the target tile type to determine mining animation color
                tile_type = map_data[x][y]
                if minedto[minable.index(tile_type)] == TILE_CAVE:
                    overlay_color = (40, 20, 5)
                elif minedto[minable.index(tile_type)] == TILE_CAVE2:
                    overlay_color = (30, 30, 35)
                else:
                    raise ValueError("Invalid tile type for mining animation")
                
                # Use target's stored direction instead of global
                if target.direction == 'left':
                    pygame.draw.rect(offscreen_surface, overlay_color,
                                  pygame.Rect(screen_x + TILE_SIZE - size, screen_y, size, TILE_SIZE))
                elif target.direction == 'right':
                    pygame.draw.rect(offscreen_surface, overlay_color,
                                  pygame.Rect(screen_x, screen_y, size, TILE_SIZE))
                elif target.direction == 'down':
                    pygame.draw.rect(offscreen_surface, overlay_color,
                                  pygame.Rect(screen_x, screen_y, TILE_SIZE, size))

def draw_player(offscreen_surface):
    screen_x = int(player_pos[0] - camera_pos[0])
    screen_y = int(player_pos[1] - camera_pos[1])
    pygame.draw.rect(offscreen_surface, PLAYER_COLOR,
                    pygame.Rect(screen_x, screen_y, PLAYER_SIZE, PLAYER_SIZE))

def handle_event(event):
    pass  # We'll use key states instead of events for smoother control

def main(screen, rect):
    global player_pos, player_vel, camera_pos, wall_contact_timer, last_wall_direction
    
    # Create a smaller offscreen surface for zooming
    zoom_width = int(rect.width / ZOOM)
    zoom_height = int(rect.height / ZOOM)
    offscreen_surface = pygame.Surface((zoom_width, zoom_height))
    
    # Get keyboard state for smooth movement
    keys = pygame.key.get_pressed()
    
    # Update mining animations
    update_mining(delta_time)
    
    # Only allow movement if not mining
    if not mining_targets:
        # Apply horizontal movement with friction
        if keys[pygame.K_LEFT]:
            player_vel[0] = max(player_vel[0] - MOVE_SPEED * delta_time * 4, -MOVE_SPEED)
        elif keys[pygame.K_RIGHT]:
            player_vel[0] = min(player_vel[0] + MOVE_SPEED * delta_time * 4, MOVE_SPEED)
        else:
            # Apply friction
            if player_vel[0] > 0:
                player_vel[0] = max(0, player_vel[0] - FRICTION * delta_time)
            elif player_vel[0] < 0:
                player_vel[0] = min(0, player_vel[0] + FRICTION * delta_time)
        
        # Apply gravity and thrust
        player_vel[1] += GRAVITY * delta_time
        if keys[pygame.K_UP]:
            player_vel[1] -= THRUST * delta_time
        
        # Update position with collision detection
        new_x = player_pos[0] + player_vel[0] * delta_time
        new_y = player_pos[1] + player_vel[1] * delta_time
        
        # Horizontal collision
        if not check_collision(new_x, player_pos[1], PLAYER_SIZE, PLAYER_SIZE):
            player_pos[0] = new_x
        else:
            player_vel[0] = 0
        
        # Vertical collision
        if not check_collision(player_pos[0], new_y, PLAYER_SIZE, PLAYER_SIZE):
            player_pos[1] = new_y
        else:
            player_vel[1] = 0
        
        # Adjust camera position for zoom
        target_x = player_pos[0] - zoom_width//2
        target_y = player_pos[1] - zoom_height//2
        camera_pos[0] += (target_x - camera_pos[0]) * 0.1
        camera_pos[1] += (target_y - camera_pos[1]) * 0.1
        
        # Clamp camera to zoomed map bounds
        camera_pos[0] = max(0, min(camera_pos[0], MAP_WIDTH * TILE_SIZE - zoom_width))
        camera_pos[1] = max(0, min(camera_pos[1], MAP_HEIGHT * TILE_SIZE - zoom_height))
    
    # Check for mining conditions
    player_tile_x = int(player_pos[0] // TILE_SIZE)
    player_tile_y = int(player_pos[1] // TILE_SIZE)
    
    # Debug info
    #print(f"Player pos: {player_pos}, Player tile: ({player_tile_x}, {player_tile_y})")
    pass
    #print(f"Wall contact: {wall_contact_timer:.2f}s, Direction: {last_wall_direction}")
    pass
    
    left_collision = check_collision(player_pos[0] - 1, player_pos[1], PLAYER_SIZE, PLAYER_SIZE)
    right_collision = check_collision(player_pos[0] + 1, player_pos[1], PLAYER_SIZE, PLAYER_SIZE)
    down_collision = check_collision(player_pos[0], player_pos[1] + 1, PLAYER_SIZE, PLAYER_SIZE)
    
    # Reset wall contact if not touching wall or direction changed
    if mining_targets:  # Reset mining timer if already mining
        wall_contact_timer = 0
        last_wall_direction = None
    elif not (left_collision or right_collision or down_collision):
        if wall_contact_timer > 0:
            #print("Resetting wall contact - no collision")
            pass
        wall_contact_timer = 0
        last_wall_direction = None
    elif keys[pygame.K_LEFT] and left_collision:
        if last_wall_direction != 'left':
            #print("Starting left wall contact")
            pass
            wall_contact_timer = 0
            last_wall_direction = 'left'
        wall_contact_timer += delta_time
        #print(f"Left mining progress: {wall_contact_timer:.2f}/0.5")
        pass
        if wall_contact_timer >= 0.5:
            if try_mine_tile(player_tile_x - 1, player_tile_y):
                wall_contact_timer = 0
    elif keys[pygame.K_RIGHT] and right_collision:
        if last_wall_direction != 'right':
            #print("Starting right wall contact")
            pass
            wall_contact_timer = 0
            last_wall_direction = 'right'
        wall_contact_timer += delta_time
        #print(f"Right mining progress: {wall_contact_timer:.2f}/0.5")
        pass
        if wall_contact_timer >= 0.5:
            if try_mine_tile(player_tile_x + 1, player_tile_y):
                wall_contact_timer = 0
    elif keys[pygame.K_DOWN] and down_collision:
        if last_wall_direction != 'down':
            #print("Starting down wall contact")
            pass
            wall_contact_timer = 0
            last_wall_direction = 'down'
        wall_contact_timer += delta_time
        #print(f"Down mining progress: {wall_contact_timer:.2f}/0.5")
        pass
        if wall_contact_timer >= 0.5:
            if try_mine_tile(player_tile_x, player_tile_y + 1):
                wall_contact_timer = 0
    else:
        if wall_contact_timer > 0:
            #print("Resetting wall contact - no mining condition met")
            pass
        wall_contact_timer = 0
        last_wall_direction = None
    
    # Update dirt cleaning
    update_inventory_emptying()
    
    #print(inventory)
    # Draw everything
    draw_grid(offscreen_surface)
    draw_player(offscreen_surface)
    draw_inventory(offscreen_surface)
    
    # Scale up the surface and blit to screen
    scaled_surface = pygame.transform.scale(offscreen_surface, (rect.width, rect.height))
    screen.blit(scaled_surface, (rect.x, rect.y))

def close():
    save_game_data()
# chess battle advanced